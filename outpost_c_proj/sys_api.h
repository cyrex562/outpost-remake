//
// Created by cyrex on 2022-05-22.
//

#ifndef OUTPOST_C_PROJ__SYS_API_H_
#define OUTPOST_C_PROJ__SYS_API_H_

#include "types.h"

void FatalExit(void);
DWORD GetVersion16(void);
HGLOBAL16 GLobalAlloc16(DWORD size, UINT16 flags);
HGLOBAL16 GlobalReAlloc16(UINT16 flags, DWORD size, HGLOBAL16 handle);
HGLOBAL16 GlobalFree16(HGLOBAL16 handle);
void * WIN16_GlobalLock16(HGLOBAL16 handle);
BOOL16 GlobalUnlock16(HGLOBAL16 handle);
DWORD GlobalSize16(HGLOBAL16 handle);
DWORD GlobalHandle16(WORD sel);
HGLOBAL16 LockSegment16(HGLOBAL16 handle);
BOOL16 WaitEvent16(HTASK16 h_task);
i16 GetModuleFileName16(i16 n_size, char * lp_file_name, HINSTANCE16 h_module);
void * MakeProcInstance16(HANDLE16 h_instance, void * func);
void FreeProcInstance16(void * func);
HRSRC16 FindResource16(char * type, char * name, HMODULE16 h_module);
HGLOBAL16 LoadResource16(HRSRC16 h_rsrc, HMODULE16 h_module);
SEGPTR WIN16_LockResource16(HGLOBAL16 handle);
BOOL16 FreeResource16(HGLOBAL16 handle);
HFILE16 _lclose16(HFILE16 h_file);
HFILE16 _lcreat16(i16 attr, char * path);
i32 _llseek16(i16 n_origin, i32 l_offset, HFILE16 h_file);
HFILE16 _lopen16(i16 mode, char * path);
i16 lstrlen16(char * in_string);
void InitTask16(CONTEXT * context);
void DOS3Call(CONTEXT * context);
u16 SetErrorMode16(u16 mode);
void __AHSHIFT(void);
void __AHINCR(void);
void OutputDebugString16(char * str);
i16 GetPrivateProfileString16(char * filename, u16 len, char * buffer, char * def_val, char * entry, char * section);
BOOL16 WritePrivateProfileString16(char * filename, char * string, char * entry, char * section);
void * GetDOSEnvironment16(void);
void FatalAppExit16(char * str, u16 action);
HINSTANCE16 WinExec16(u16 n_cmd_show, char * lp_cmd_line);
void __WINFLAGS(void);
u32 GlobalDOSAlloc16(u32 size);
u16 GlobalDOSFree16(u16 sel);
u16 GlobalPageLock16(HGLOBAL16 handle);
u16 GlobalPageUnlock16(HGLOBAL16 handle);
void hmemcpy16(i32 count, void * src, void * dst);
i32 WIN16_hread(i32 count, void * buffer, HFILE16 h_file);
u32 _hwrite16(u32 count, u8 * buffer, HFILE16 h_file);
COLORREF SetBkColor16(COLORREF color, HDC16 hdc);
i16 SetMapMode16(i16 mode, HDC16 hdc);
u8 SetTextColor16(COLORREF color, HDC16 hdc);
BOOL16 LineTo16(INT16 y, INT16 x, HDC16 hdc);
DWORD MoveTo16(INT16 y, INT16 x, HDC16 hdc);
BOOL16 Ellipse16(INT16 bottom, INT16 right, INT16 top, INT16 left, HDC16 hdc);
BOOL16 Rectangle16(INT16 bottom, INT16 right, INT16 top, INT16 left, HDC16 hdc);
BOOL16 TextOut16(i16 count, char * str, i16 y, i16 x, HDC16 hdc);
BOOL16 Polygon16(i16 count, POINT16 * pt, HDC16 hdc);
HGDIOBJ16 SelectObject16(HGDIOBJ16 handle, HDC16 hdc);
HDC16 CreateDC16(DEVMODEA * init_data, char * output, char * device, char * driver);
HPEN16 CreatePen16(COLORREF color, INT16 width, INT16 style);
HBRUSH16 CreateSolidBrush16(COLORREF color);
BOOL16 DeleteDC16(HDC16 hdc);
BOOL16 DeleteObject16(HGDIOBJ16 obj);
DWORD GetCurrentPosition16(HDC16 hdc);
INT16 GetDeviceCaps16(INT16 cap, HDC16 hdc);
HGDIOBJ16 GetStockObject16(INT16 obj);
DWORD GetTextExtent16(INT16 count, LPCSTR str, HDC16 hdc);
BOOL16 UnrealizeObject16(HGDIOBJ16 obj);
HPALETTE16 CreatePalette16(LOGPALETTE * palette);
UINT16 GetSystemPaletteEntries(PALETTEENTRY * entries, UINT16 count, UINT16 start, HDC16 hdc);
INT16 StretchDIBits16(DWORD dw_rop, UINT16 w_usage, BITMAPINFO * info, PVOID bits, INT16 height_src, INT16 width_src, INT16 y_src, INT16 x_src, INT16 height_dst, INT16 width_dst, INT16 y_dst, INT16 x_dst, HDC16 hdc);
INT16 SetDIBitsToDevice(UINT16 coloruse, BITMAPINFO * info, void * bits, UINT16 lines, UINT16 startscan, INT16 y_src, INT16 x_src, INT16 cy, INT16 cx, INT16 y_dest, INT16 x_dest, HDC16 hdc);
BOOL16 MoveToEx16(POINT16 * pt, INT16 y, INT16 x, HDC16 hdc);
INT16 MessageBox16(UINT16 type, char * title, char * text, HWND16 hwnd);
INT16 InitApp16(HINSTANCE16 h_instance);
void PostQuitMessage16(INT16 exit_code);
UINT16 SetTimer16(void * proc, UINT16 timeout, UINT16 id, HWND16 hwnd);
BOOL16 KillTimer16(UINT16 id, HWND16 hwnd);
BOOL16 GetCursorPos16(POINT16 * pt);
HWND16 SetCapture16(HWND16 hwnd);
BOOL16 ReleaseCapture16(void);
HWND16 SetFocus16(HWND16 hwnd);
HANDLE16 RemoveProp16(LPCSTR str, HWND16 hwnd);
HANDLE16 GetProp16(LPCSTR in_string, HWND16 hwnd);
BOOL16 SetProp16(HANDLE16 handle, char * str, HWND16 hwnd);
void ClientToScreen16(POINT16 * lppnt, HWND16 hwnd);
void ScreenToClient16(POINT16 * lppnt, HWND16 hwnd);
BOOL16 IsIconic16(HWND16 hwnd);
void GetWindowRect16(RECT16 * rect, HWND16 hwnd);
void GetClientRect16(RECT16 * rect, HWND16 hwnd);
BOOL16 EnableWindow16(BOOL16 enable, HWND16 hwnd);
BOOL16 IsWindowEnabled16(HWND16 hwnd);
INT16 GetWindowText16(INT16 n_max_count, u32 lp_string, HWND16 hwnd);
BOOL16 SetWindowText16(u32 lp_string, HWND16 hwnd);
HDC16 BeginPaint16(PAINTSTRUCT16 * lps, HWND16 hwnd);
BOOL16 EndPaint16(PAINTSTRUCT16 * lps, HWND16 hwnd);
HWND16 CreateWindow16(DWORD style, void * data, HINSTANCE16 instance, HMENU16 hmenu, HWND16 parent, INT16 height, INT16 width, INT16 y, INT16 x, char * window_name, char * class_name);
BOOL16 ShowWindow16(INT16 cmd, HWND16 hwnd);
BOOL16 BringWindowToTop16(HWND16 hwnd);
BOOL16 IsWindow16(HWND16 hwnd);
BOOL16 DestroyWindow16(HWND16 hwnd);
BOOL16 EnumChildWindows1(LPARAM lparam, void * func, HWND16 parent);
BOOL16 MoveWindow16(BOOL16 repaint, INT16 cy, INT16 cx, INT16 y, INT16 x, HWND16 hwnd);
ATOM RegisterClass16(WNDCLASS16 * wc);
HDC16 GetDC16(HWND16 hwnd);
HDC16 GetWindowDC16(HWND16 hwnd);
INT16 ReleaseDC16(HDC16 hdc, HWND16 hwnd);
HCURSOR16 SetCursor16(HCURSOR16 hcursor);
INT16 ShowCursor16(BOOL16 b_show);
BOOL16 PtInRect16(POINT16 pt, RECT16 * rect);
i16 FillRect16(HBRUSH16 hbrush, RECT16 * rect, HDC16 hdc);
INT16 FrameRect16(HBRUSH16 hbrush, RECT16 * rect, HDC16 hdc);
BOOL16 DrawIcon16(HICON16 h_icon, INT16 y, INT16 x, HDC16 hdc);
INT16 DrawText16(UINT16 flags, RECT16 * rect, INT16 count, LPCSTR in_string, HDC16 hdc);
HWND16 CreateDialog16(void * dlg_proc, HWND16 owner, char * dlg_template, HINSTANCE16 hinst);
BOOL16 IsDialogMessage16(MSG16 * msg16, HWND16 hwnd_dlg);
HWND16 GetDlgItem16(INT16 id, HWND16 hwnd_dlg);
void SetDlgItemText16(u32 lp_string, INT16 id, HWND16 hwnd);
void SetDlgItemInt16(BOOL16 f_signed, UINT16 value, INT16 id, HWND16 hwnd);
UINT16 GetDlgItemInt16(BOOL16 f_signed, BOOL16 * translated, INT16 id, HWND16 hwnd);
BOOL16 CheckRadioButton16(UINT16 check_id, UINT16 last_id, UINT16 first_id, HWND16 hwnd_dlg);
BOOL16 CheckDlgButton16(UINT16 check, INT16 id, HWND16 hwnd);
UINT16 IsDlgButtonChecked(UINT16 id, HWND16 hwnd);
LRESULT SendDlgItemMessage16(LPARAM l_param, WPARAM16 w_param, UINT16 msg, INT16 id, HWND16 hwnd);
void MapDialogRect16(RECT16 * rect, HWND16 hwnd);
void MessageBeep16(UINT16 i);
LRESULT DefWindowProc16(LPARAM lparam, WPARAM16 wparam, UINT16 msg, HWND16 hwnd);
BOOL16 GetMessage16(UINT16 last, UINT16 first, HWND16 hwnd, MSG16 * msg);
BOOL16 PostMessage16(LPARAM lparam, WPARAM16 wparam, UINT16 msg, HWND16 hwnd);
LRESULT SendMessage16(LPARAM lparam, WPARAM16 wparam, UINT16 msg, HWND16 hwnd);
BOOL16 TranslateMessage16(MSG16 * msg);
long DispatchMessage16(MSG16 * msg);
LRESULT CallWindowProc16(LPARAM lparam, WPARAM16 wparam, UINT16 msg, HWND16 hwnd, LPVOID func);
void UpdateWindow16(HWND16 hwnd);
void InvalidateRect16(BOOL16 erase, RECT16 * rect, HWND16 hwnd);
void ValidateRect16(RECT16 * rect, HWND16 hwnd);
WORD GetWindowWord16(INT16 offset, HWND16 hwnd);
WORD SetWindowWord16(WORD newval, INT16 offset, HWND16 hwnd);
long GetWindowLong16(INT16 offset, HWND16 hwnd);
long SetWindowLong16(long newval, i16 offset, HWND16 hwnd);
HMENU16 LoadMenu16(char * name, HINSTANCE16 instance);
BOOL16 DestroyMenu16(HMENU16 menu);
BOOL16 CheckMenuItem16(UINT16 w_flags, UINT16 w_item_id, HMENU16 hmenu);
BOOL16 EnableMenuItem16(UINT16 w_flags, UINT16 w_item_id, HMENU16 hmenu);
HMENU16 GetSubMenu16(INT16 n_pos, HMENU16 h_menu);
BOOL16 WinHelp16(DWORD dw_data, UINT16 w_command, char * lp_help_file, HWND16 hwnd);
HCURSOR16 LoadCursor16(char * name, HINSTANCE16 h_instance);
HICON16 LoadIcon16(char * name, HINSTANCE16 h_instance);
INT16 LoadString16(INT16 buf_len, char * buffer, UINT16 resource_id, HINSTANCE16 instance);
HACCEL16 LoadAccelerators16(char * lp_table_name, HINSTANCE16 instance);
INT16 TranslateAccelerator16(MSG16 * msg, HACCEL16 haccel, HWND16 hwnd);
INT16 GetSystemMetrics16(INT16 index);
COLORREF GetSysColor16(INT16 index);
void SetSysColors16(COLORREF * values, INT16 * list, INT16 count);
BOOL16 GrayString16(INT16 cy, INT16 cx, INT16 y, INT16 x, INT16 cch, LPARAM lparam, void * gsprc, HBRUSH16 param_8, HDC16 hdc);
HWND16 SetSysModalWindow(HWND16 hwnd);
HWND16 GetNextDlgTabItem16(BOOL16 f_previous, HWND16 hwnd_ctrl, HWND16 hwnd_dlg);
BOOL16 SetWindowPos16(WORD flags, INT16 cy, INT16 cx, INT16 y, INT16 x, HWND16 hwnd_insert_after, HWND16 hwnd);
UINT16 GetMenuState16(UINT16 w_flags, UINT16 w_item_id, HMENU16 hmenu);
INT16 GetDlgCtrlID16(HWND16 hwnd);
HPALETTE16 SelectPalette16(BOOL16 b_force_background, HPALETTE16 hpal, HDC16 hdc);
UINT16 RealizePalette16(HDC16 hdc);
BOOL16 GetWindowPlacement16(WINDOWPLACEMENT16 * wp16, HWND16 hwnd);
BOOL16 SetWindowPlacement16(WINDOWPLACEMENT16 * wp16, HWND16 hwnd);
BOOL16 GetClassInfo16(WNDCLASS16 * wc, char * name, HINSTANCE16 h_inst16);
BOOL16 InsertMenu16(u32 data, UINT16 id, UINT16 flags, UINT16 pos, HMENU16 hmenu);
BOOL16 DeleteMenu16(UINT16 wflags, UINT16 npos, HMENU16 hmenu);
BOOL16 ModifyMenu16(u32 data, UINT16 id, UINT16 flags, UINT16 pos, HMENU16 hmenu);
BOOL16 TrackPopupMenu16(RECT16 * lp_rect, HWND16 hwnd, INT16 n_reserved, INT16 y, INT16 x, UINT16 wflags, HMENU16 hmenu);
INT16 wsprintf16(WORD * valist, char * spec, char * buffer, ...);
INT16 wvsprintf16(WORD * args, char * spec, char * buffer);
HWND16 CreateWIndowEx16(void * data, HINSTANCE16 instance, HMENU16 hmenu, HWND16 parent, INT16 height, INT16 width, INT16 y, INT16 x, DWORD style, char * window_name, char * class_name, DWORD ex_style);
BOOL16 DestroyIcon16(HICON16 h_icon);
BOOL16 DestroyCursor16(HCURSOR16 h_cursor);
DWORD mciSendCommand16(DWORD p2, DWORD dw_param1, UINT16 w_msg, UINT16 w_dev_id);
BOOL16 mciGetErrorString16(UINT16 u_length, char * lp_str_buffer, DWORD w_error);
BOOL16 GetOpenFileName16(u32 ofn);
BOOL16 GetSaveFileName16(u32 ofn);
void* swi(u16);
u32 SegmentLimit(u32 a);

#endif //OUTPOST_C_PROJ__SYS_API_H_
